<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="870px" preserveAspectRatio="none" style="width:585px;height:870px;" version="1.1" viewBox="0 0 585 870" width="585px" zoomAndPan="magnify"><defs><filter height="300%" id="f18k2jea6rnunn" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--class PlayerData--><rect fill="#FEFECE" filter="url(#f18k2jea6rnunn)" height="150.4375" id="PlayerData" style="stroke: #A80036; stroke-width: 1.5;" width="391" x="40" y="447"/><ellipse cx="197.25" cy="463" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M200.2188,468.6406 Q199.6406,468.9375 199,469.0781 Q198.3594,469.2344 197.6563,469.2344 Q195.1563,469.2344 193.8281,467.5938 Q192.5156,465.9375 192.5156,462.8125 Q192.5156,459.6875 193.8281,458.0313 Q195.1563,456.375 197.6563,456.375 Q198.3594,456.375 199,456.5313 Q199.6563,456.6875 200.2188,456.9844 L200.2188,459.7031 Q199.5938,459.125 199,458.8594 Q198.4063,458.5781 197.7813,458.5781 Q196.4375,458.5781 195.75,459.6563 Q195.0625,460.7188 195.0625,462.8125 Q195.0625,464.9063 195.75,465.9844 Q196.4375,467.0469 197.7813,467.0469 Q198.4063,467.0469 199,466.7813 Q199.5938,466.5 200.2188,465.9219 L200.2188,468.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="68" x="217.75" y="467.1543">PlayerData</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="41" x2="430" y1="479" y2="479"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="48" y="487.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="60" y="493.2104">std::string name{};</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="48" y="500.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="60" y="506.0151">std::vector&lt;Frame&gt; rolls{};</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="41" x2="430" y1="512.6094" y2="512.6094"/><ellipse cx="51" cy="524.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="60" y="526.8198">PlayerData() = delete;</text><ellipse cx="51" cy="537.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="60" y="539.6245">PlayerData(const std::string&amp; n, const std::vector&lt;Frame&gt;&amp; r);</text><ellipse cx="51" cy="550.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="60" y="552.4292">bool operator==(const PlayerData&amp; rhs) const;</text><ellipse cx="51" cy="562.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="60" y="565.2339">size_t countPoints() const;</text><ellipse cx="51" cy="575.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="60" y="578.0386">const std::vector&lt;Frame&gt;&amp; getRolls() const;</text><ellipse cx="51" cy="588.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="60" y="590.8433">const std::string&amp; getName() const;</text><!--class Frame--><rect fill="#FEFECE" filter="url(#f18k2jea6rnunn)" height="201.6563" id="Frame" style="stroke: #A80036; stroke-width: 1.5;" width="459" x="6" y="658"/><ellipse cx="211.75" cy="674" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M214.7188,679.6406 Q214.1406,679.9375 213.5,680.0781 Q212.8594,680.2344 212.1563,680.2344 Q209.6563,680.2344 208.3281,678.5938 Q207.0156,676.9375 207.0156,673.8125 Q207.0156,670.6875 208.3281,669.0313 Q209.6563,667.375 212.1563,667.375 Q212.8594,667.375 213.5,667.5313 Q214.1563,667.6875 214.7188,667.9844 L214.7188,670.7031 Q214.0938,670.125 213.5,669.8594 Q212.9063,669.5781 212.2813,669.5781 Q210.9375,669.5781 210.25,670.6563 Q209.5625,671.7188 209.5625,673.8125 Q209.5625,675.9063 210.25,676.9844 Q210.9375,678.0469 212.2813,678.0469 Q212.9063,678.0469 213.5,677.7813 Q214.0938,677.5 214.7188,676.9219 L214.7188,679.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="39" x="232.25" y="678.1543">Frame</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="464" y1="690" y2="690"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="698.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="26" y="704.2104">char firstRoll{' '};</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="711.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="26" y="717.0151">char secondRoll{' '};</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="464" y1="723.6094" y2="723.6094"/><ellipse cx="17" cy="735.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="26" y="737.8198">Frame() = default;</text><ellipse cx="17" cy="748.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="26" y="750.6245">Frame(char first, char second);</text><ellipse cx="17" cy="761.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="26" y="763.4292">bool operator==(const Frame&amp; rhs) const;</text><ellipse cx="17" cy="773.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="433" x="26" y="776.2339">friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Frame&amp; frame);</text><ellipse cx="17" cy="786.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="26" y="789.0386">char getFirstRoll() const;</text><ellipse cx="17" cy="799.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="26" y="801.8433">char getSecondRoll() const;</text><ellipse cx="17" cy="812.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="26" y="814.6479">bool isSpare() const;</text><ellipse cx="17" cy="825.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="26" y="827.4526">bool isStrike() const;</text><ellipse cx="17" cy="837.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="26" y="840.2573">size_t getPoints() const;</text><ellipse cx="17" cy="850.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="26" y="853.062">size_t getFirstRollPoints() const;</text><!--class Game--><rect fill="#FEFECE" filter="url(#f18k2jea6rnunn)" height="163.2422" id="Game" style="stroke: #A80036; stroke-width: 1.5;" width="364" x="192.5" y="207"/><ellipse cx="352.25" cy="223" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M355.2188,228.6406 Q354.6406,228.9375 354,229.0781 Q353.3594,229.2344 352.6563,229.2344 Q350.1563,229.2344 348.8281,227.5938 Q347.5156,225.9375 347.5156,222.8125 Q347.5156,219.6875 348.8281,218.0313 Q350.1563,216.375 352.6563,216.375 Q353.3594,216.375 354,216.5313 Q354.6563,216.6875 355.2188,216.9844 L355.2188,219.7031 Q354.5938,219.125 354,218.8594 Q353.4063,218.5781 352.7813,218.5781 Q351.4375,218.5781 350.75,219.6563 Q350.0625,220.7188 350.0625,222.8125 Q350.0625,224.9063 350.75,225.9844 Q351.4375,227.0469 352.7813,227.0469 Q353.4063,227.0469 354,226.7813 Q354.5938,226.5 355.2188,225.9219 L355.2188,228.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="36" x="372.75" y="227.1543">Game</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="193.5" x2="555.5" y1="239" y2="239"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="200.5" y="247.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="212.5" y="253.2104">std::vector&lt;PlayerData&gt; players{};</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="193.5" x2="555.5" y1="259.8047" y2="259.8047"/><ellipse cx="203.5" cy="271.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="212.5" y="274.0151">Game() = delete;</text><ellipse cx="203.5" cy="284.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="212.5" y="286.8198">explicit Game(const std::filesystem::path&amp; filePath);</text><ellipse cx="203.5" cy="297.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="212.5" y="299.6245">void loadFromFile(const std::string&amp; filePath);</text><ellipse cx="203.5" cy="310.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="212.5" y="312.4292">const std::vector&lt;PlayerData&gt;&amp; getPlayers() const;</text><ellipse cx="203.5" cy="322.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="212.5" y="325.2339">size_t countPoints(const std::vector&lt;Frame&gt;&amp; rolls) const;</text><ellipse cx="203.5" cy="335.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="212.5" y="338.0386">Status getGameStatus() const;</text><ellipse cx="203.5" cy="348.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="212.5" y="350.8433">std::string getOutputString(int laneNumber) const;</text><ellipse cx="203.5" cy="361.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="212.5" y="363.6479">bool operator==(const Game&amp; rhs) const;</text><!--class Status--><rect fill="#FEFECE" filter="url(#f18k2jea6rnunn)" height="86.4141" id="Status" style="stroke: #A80036; stroke-width: 1.5;" width="95" x="466" y="479"/><ellipse cx="490.9" cy="495" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M495.0094,501 L487.2906,501 L487.2906,488.6094 L495.0094,488.6094 L495.0094,490.7656 L489.7438,490.7656 L489.7438,493.4375 L494.5094,493.4375 L494.5094,495.5938 L489.7438,495.5938 L489.7438,498.8438 L495.0094,498.8438 L495.0094,501 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="41" x="507.1" y="499.1543">Status</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="467" x2="560" y1="511" y2="511"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="472" y="525.2104">NO_GAME,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="472" y="538.0151">IN_PROGRESS,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="472" y="550.8198">FINISHED,</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="467" x2="560" y1="557.4141" y2="557.4141"/><!--class BowlingAlley--><rect fill="#FEFECE" filter="url(#f18k2jea6rnunn)" height="137.6328" id="BowlingAlley" style="stroke: #A80036; stroke-width: 1.5;" width="400" x="174.5" y="8"/><ellipse cx="332.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M335.7188,29.6406 Q335.1406,29.9375 334.5,30.0781 Q333.8594,30.2344 333.1563,30.2344 Q330.6563,30.2344 329.3281,28.5938 Q328.0156,26.9375 328.0156,23.8125 Q328.0156,20.6875 329.3281,19.0313 Q330.6563,17.375 333.1563,17.375 Q333.8594,17.375 334.5,17.5313 Q335.1563,17.6875 335.7188,17.9844 L335.7188,20.7031 Q335.0938,20.125 334.5,19.8594 Q333.9063,19.5781 333.2813,19.5781 Q331.9375,19.5781 331.25,20.6563 Q330.5625,21.7188 330.5625,23.8125 Q330.5625,25.9063 331.25,26.9844 Q331.9375,28.0469 333.2813,28.0469 Q333.9063,28.0469 334.5,27.7813 Q335.0938,27.5 335.7188,26.9219 L335.7188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="353.25" y="28.1543">BowlingAlley</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="175.5" x2="573.5" y1="40" y2="40"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="182.5" y="48.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="194.5" y="54.2104">std::vector&lt;std::shared_ptr&lt;Game&gt;&gt; games_{};</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="182.5" y="61.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="194.5" y="67.0151">std::filesystem::path path_{};</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="175.5" x2="573.5" y1="73.6094" y2="73.6094"/><ellipse cx="185.5" cy="85.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="194.5" y="87.8198">BowlingAlley() = delete;</text><ellipse cx="185.5" cy="98.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="194.5" y="100.6245">explicit BowlingAlley(const fs::path&amp; pathToFolder);</text><ellipse cx="185.5" cy="111.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="194.5" y="113.4292">void loadFromFolder(const fs::path&amp; pathToFolder);</text><ellipse cx="185.5" cy="123.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="194.5" y="126.2339">std::string getOutputString() const;</text><ellipse cx="185.5" cy="136.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="194.5" y="139.0386">const std::vector&lt;std::shared_ptr&lt;Game&gt;&gt;&amp; getGames() const;</text><!--link Game to Status--><path d="M430.77,383.22 C450.73,416.46 472.2,452.22 488.27,478.98 " fill="none" id="Game-Status" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="427.036" cy="376.9999" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="431.1519" x2="422.92" y1="383.8599" y2="370.14"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="420.176" x2="433.8959" y1="381.1159" y2="372.884"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="448.5" y="413.0669">public</text><!--link Game to PlayerData--><path d="M319.33,381.38 C306.28,403.11 292.53,426.02 280.02,446.85 " fill="none" id="Game-PlayerData" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="326.08,370.14,319.5631,373.227,319.9061,380.4299,326.423,377.3429,326.08,370.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--link PlayerData to Frame--><path d="M235.5,610.36 C235.5,625.77 235.5,641.93 235.5,657.67 " fill="none" id="PlayerData-Frame" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="235.5,597.03,231.5,603.03,235.5,609.03,239.5,603.03,235.5,597.03" style="stroke: #A80036; stroke-width: 1.0;"/><!--link BowlingAlley to Game--><path d="M374.5,159.43 C374.5,174.95 374.5,191.18 374.5,206.68 " fill="none" id="BowlingAlley-Game" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="374.5,146.02,370.5,152.02,374.5,158.02,378.5,152.02,374.5,146.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml bowling/uml/BowlingUML
class PlayerData{
    -std::string name{};
    -std::vector<Frame> rolls{};

    +PlayerData() = delete;
    +PlayerData(const std::string& n, const std::vector<Frame>& r);
    +bool operator==(const PlayerData& rhs) const;
    +size_t countPoints() const;
    +const std::vector<Frame>& getRolls() const;
    +const std::string& getName() const;
}

class Frame {
    -char firstRoll{' '};
    -char secondRoll{' '};

    +Frame() = default;
    +Frame(char first, char second);
    +bool operator==(const Frame& rhs) const;
    +friend std::ostream& operator<<(std::ostream& os, const Frame& frame);
    +char getFirstRoll() const;
    +char getSecondRoll() const;
    +bool isSpare() const;
    +bool isStrike() const;
    +size_t getPoints() const;
    +size_t getFirstRollPoints() const;
}

class Game{
    -std::vector<PlayerData> players{};
    +Game() = delete;
    +explicit Game(const std::filesystem::path& filePath);
    +void loadFromFile(const std::string& filePath);
    +const std::vector<PlayerData>& getPlayers() const;
    +size_t countPoints(const std::vector<Frame>& rolls) const;
    +Status getGameStatus() const;
    +std::string getOutputString(int laneNumber) const;
    +bool operator==(const Game& rhs) const;
}

enum Status{
        NO_GAME,
        IN_PROGRESS,
        FINISHED,
}

class BowlingAlley{
    -std::vector<std::shared_ptr<Game>> games_{};
    -std::filesystem::path path_{};
    +BowlingAlley() = delete;
    +explicit BowlingAlley(const fs::path& pathToFolder);
    +void loadFromFolder(const fs::path& pathToFolder);
    +std::string getOutputString() const;
    +const std::vector<std::shared_ptr<Game>>& getGames() const;
}
Game +- - Status : public
Game *- - PlayerData
PlayerData *- - Frame
BowlingAlley o- - Game
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.9+11-Ubuntu-0ubuntu1.20.04
Operating System: Linux
OS Version: 4.19.104-microsoft-standard
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>